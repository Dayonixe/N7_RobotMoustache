--------------------------------------------------------------------------------
-- TP3 Robot Lego Mindstorms EV3
-- Nouhaila ACHEHBOUNE, Théo PIROUELLE
-- ENSEEIHT – 2022-2023
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
-- Constant values
--------------------------------------------------------------------------------
-- si vous avez besoin de déclarer des constantes, mettez les ci-dessous ...
-- exemple: 
-- const DARK int;


--------------------------------------------------------------------------------
-- Main node
--------------------------------------------------------------------------------
-- Inputs:
--   sensors 1 to 4 (from ports IN1 to IN4)
--   speed of motors A to B (from ports OUTA to OUTD)
-- Assumption:
--   sensor_1 = right touch sensor
--   sensor_4 = left touch sensor
--   motor_speed_sensor_a = speed of motor A (right wheel)
--   motor_speed_sensor_b = speed of motor B (left wheel)
--------------------------------------------------------------------------------
node main_robot (
		sensor_1 : bool ;
		sensor_2 : int ;
		sensor_3 : int ;
		sensor_4 : bool ;
		motor_speed_sensor_a : int ;
		motor_speed_sensor_b : int ;
		motor_speed_sensor_c : int ;
		motor_speed_sensor_d : int ;
		)
--------------------------------------------------------------------------------
-- Outputs:
--   Required rotation direction for each motor (clockwise versus counterclockwise)
--   Required command mode for each motor (speed versus position)
--   Required value of the command for each motor
-- Assumption
--   Motor_A = right wheel
--   Motor_B = left wheel
--------------------------------------------------------------------------------
returns (
	Clockwise_A : bool; Counterclockwise_A : bool; Cmd_Position_A : bool ; Cmd_Speed_A : bool; Value_A : int; 
	Clockwise_B : bool; Counterclockwise_C : bool; Cmd_Position_B : bool ; Cmd_Speed_B : bool; Value_B : int; 
	Clockwise_C : bool; Counterclockwise_B : bool; Cmd_Position_C : bool ; Cmd_Speed_C : bool; Value_C : int; 
	Clockwise_D : bool; Counterclockwise_D : bool; Cmd_Position_D : bool ; Cmd_Speed_D : bool; Value_D : int; 
	);
--------------------------------------------------------------------------------
var
	Forth, Back, Left, Right, Stop : bool;
let
	Clockwise_C = false; Counterclockwise_C = false; Cmd_Position_C = false; Cmd_Speed_C = false; Value_C = 0;
	Clockwise_D = false; Counterclockwise_D = false; Cmd_Position_D = false; Cmd_Speed_D = false; Value_D = 0;

	Forth = (not(Stop)) and (not(Back)) and (not(Left)) and (not(Right));
	Back = sensor_1 or sensor_4;
	Left = stable(sensor_1, 130);
	Right = stable(sensor_4 and not (sensor_1), 130);
	Stop = false;

	Clockwise_A = Forth;
	Counterclockwise_A = stable(Back, 100) or Right;
	Cmd_Position_A = false; Cmd_Speed_A = true; Value_A = 100;

	Clockwise_B = Forth;
	Counterclockwise_B = stable(Back, 100) or Left;
	Cmd_Position_B = false; Cmd_Speed_B = true; Value_B = 100;
tel;
--------------------------------------------------------------------------------
	


--------------------------------------------------------------------------------
-- si vous avez besoin d'utiliser d'autres noeuds, mettez les ci-après ...
node stable (set : bool ; delay : int) returns (level : bool);
var count : int;
let
	level = count > 0;
	count = if set then delay
			else if (false -> pre(level)) then pre(count) - 1
			else 0 -> pre(count);
tel;


node rising_edge (X : bool) returns (Y : bool);
let
	Y = X -> (X and not pre(X));
tel;